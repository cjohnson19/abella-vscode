{
  "scopeName": "source.abella",
  "name": "abella",
  "patterns": [
    {
      "name": "string.quoted.double.abella",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.abella",
          "match": "\\\\(?:\\r\\n|[\\s\\S])"
        }
      ]
    },
    {
      "name": "constant.language.boolean.abella",
      "match": "\\b(?:false|true)\\b"
    },
    {
      "name": "keyword.other.abella",
      "match": "(?:H[1-9]+[0-9]*|IH[0-9]*)"
    },
    {
      "match": "\\b(Theorem|Define|Subgoal)\\s+([A-Za-z0-9'-_.]+)",
      "captures": {
        "1": {
          "name": "keyword.other.abella"
        },
        "2": {
          "name": "variable.language.abella"
        }
      }
    },
    {
      "name": "entity.name.type.abella",
      "match": "\\b(?:o|olist|prop)\\b"
    },
    {
      "name": "keyword.operator.abella",
      "match": "(?:[A-Za-z0-9_'-.])*\\s*<",
      "captures": {
        "1": {
          "name": "support.function.abella"
        }
      }
    },
    {
      "name": "keyword.other.abella",
      "match": "\\b(Theorem|Specification|Set|Schema|Subgoal|Variables|Nominals|Close)\\b"
    },
    {
      "name": "support.function.abella",
      "match": "\\b(forall|exists|nabla|case|inst|induction|coinduction|intros|keep|left|right|search|split|on|to|with|assert|prune|permute|backchain|unfold|witness|cut|monotone|clear|unabbrev|by)\\b"
    },
    {
      "name": "support.function.abella",
      "match": "(?:Proof completed)"
    },
    {
      "match": "\\b(apply)\\s+([A-Za-z0-9'-_.]+)",
      "captures": {
        "1": {
          "name": "support.function.abella"
        },
        "2": {
          "name": "variable.language.abella"
        }
      }
    },
    {
      "name": "keyword.operator.abella",
      "match": "(\\\\\\/|\\/\\\\|->|,|:|=|\\|-)"
    },
    {
      "name": "constant.numeric.abella",
      "match": "\\b([1-9]+[0-9]*)\\b"
    },
    {
      "name": "markup.important.abella",
      "match": "\\b(?:skip)\\b|\\."
    },
    {
      "name": "comment.line.percentage.abella",
      "begin": "\\s*%",
      "end": "$",
      "patterns": [
        {
          "name": "comment.line.percentage.abella",
          "match": ".*"
        }
      ]
    },
    {
      "name": "constant.other.symbol.abella",
      "match": "[{}\\[\\]\\(\\)\\.]"
    }
  ]
}
